(()=>{const e=document.getElementById("inputField"),t=document.getElementById("commandArea");function n(){const t=e.value;return e.value="",t}e.addEventListener("keypress",(function(e){if("Enter"===e.key){const e=new CustomEvent("commandEntered",{detail:{text:n()}});document.dispatchEvent(e)}})),document.addEventListener("commandEntered",(function(e){!function(e){const n=document.createElement("p");n.textContent=e,t.appendChild(n)}(e.detail.text)}))})(),(()=>{function e(e,t){e.readyState!==WebSocket.CLOSED?(t.endsWith("\n")||(t+="\n"),console.log("sending command: "+t),e.send(t)):console.log("socket closed")}(async function(){const t=["movej([0.0, 1.57, 0.0, -1.57, 0.0, 0.0], a=1.4, v=1.05)","set_digital_out(0, True)","set_digital_out(1, False)","set_digital_out(2, True)","set_digital_out(3, True)",'popup("post","post")'],n=new WebSocket(`ws://${"localhost"}:${8765}`);n.onopen=()=>{console.log("proxy server opened");for(const o of t)e(n,o);document.addEventListener("commandEntered",(function(t){e(n,t.detail.text)}))}})().then()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJNQUFBLE1BQU1BLEVBQWFDLFNBQVNDLGVBQWUsY0FDckNDLEVBQWNGLFNBQVNDLGVBQWUsZUFFNUMsU0FBU0UsSUFDTCxNQUFNQyxFQUFPTCxFQUFXTSxNQUV4QixPQURBTixFQUFXTSxNQUFRLEdBQ1pELENBQ1gsQ0FRQUwsRUFBV08saUJBQWlCLFlBQVksU0FBVUMsR0FDOUMsR0FBYSxVQUFWQSxFQUFFQyxJQUFpQixDQUNsQixNQUFNQyxFQUFjLElBQUlDLFlBQVksaUJBQWtCLENBQ2xEQyxPQUFRLENBQ0pQLEtBQU1ELE9BR2RILFNBQVNZLGNBQWNILEVBQzNCLENBQ0osSUFFQVQsU0FBU00saUJBQWlCLGtCQUFrQixTQUFVQyxJQWpCdEQsU0FBNEJILEdBQ3hCLE1BQU1TLEVBQU9iLFNBQVNjLGNBQWMsS0FDcENELEVBQUtFLFlBQWNYLEVBQ25CRixFQUFZYyxZQUFZSCxFQUM1QixDQWNJSSxDQUFtQlYsRUFBRUksT0FBT1AsS0FDaEMsRyxXQ2pCQSxTQUFTYyxFQUFLQyxFQUFRQyxHQUNkRCxFQUFPRSxhQUFlQyxVQUFVQyxRQUkvQkgsRUFBS0ksU0FBUyxRQUNmSixHQUFRLE1BR1pLLFFBQVFDLElBQUksb0JBQXNCTixHQUVsQ0QsRUFBT0QsS0FBS0UsSUFUUkssUUFBUUMsSUFBSSxnQkFVcEIsRUFvQkFDLGlCQVFJLE1BQU1DLEVBQVcsQ0FDYiwwREFDQSwyQkFDQSw0QkFDQSwyQkFDQSwyQkFDQSx3QkFHRUMsRUEzREMsSUFBSVAsVUFDUCxRQTBEMkIsZUFBYSxRQUM1Q08sRUFBWUMsT0FBUyxLQUNqQkwsUUFBUUMsSUFBSSx1QkFDWixJQUFLLE1BQU1LLEtBQVdILEVBQ2xCVixFQUFLVyxFQUFhRSxHQUV0Qi9CLFNBQVNNLGlCQUFpQixrQkFBa0IsU0FBVUMsR0FDbERXLEVBQUtXLEVBQWF0QixFQUFFSSxPQUFPUCxLQUMvQixHQUFDLENBU1QsRUFHQTRCLEdBQWVDLE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYWNoZWxvci1wcm9qZWN0Ly4vc3JjL2lucHV0LmpzIiwid2VicGFjazovL2JhY2hlbG9yLXByb2plY3QvLi9zcmMvcm9ib3Rfc29ja2V0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGlucHV0RmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlucHV0RmllbGRcIik7XHJcbmNvbnN0IGNvbW1hbmRBcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb21tYW5kQXJlYVwiKTtcclxuXHJcbmZ1bmN0aW9uIGdldFRleHRGcm9tSW5wdXQoKSB7XHJcbiAgICBjb25zdCB0ZXh0ID0gaW5wdXRGaWVsZC52YWx1ZTtcclxuICAgIGlucHV0RmllbGQudmFsdWUgPSAnJztcclxuICAgIHJldHVybiB0ZXh0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVQVGFnV2l0aFRleHQodGV4dCl7XHJcbiAgICBjb25zdCBwVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgcFRhZy50ZXh0Q29udGVudCA9IHRleHQ7XHJcbiAgICBjb21tYW5kQXJlYS5hcHBlbmRDaGlsZChwVGFnKVxyXG59XHJcblxyXG5pbnB1dEZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgZnVuY3Rpb24gKGUpIHtcclxuICAgIGlmKGUua2V5ID09PSAnRW50ZXInKSB7XHJcbiAgICAgICAgY29uc3QgY3VzdG9tRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2NvbW1hbmRFbnRlcmVkJywge1xyXG4gICAgICAgICAgICBkZXRhaWw6IHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IGdldFRleHRGcm9tSW5wdXQoKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoY3VzdG9tRXZlbnQpO1xyXG4gICAgfVxyXG59KVxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY29tbWFuZEVudGVyZWQnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgY3JlYXRlUFRhZ1dpdGhUZXh0KGUuZGV0YWlsLnRleHQpO1xyXG59KTtcclxuIiwiZnVuY3Rpb24gZ2V0X3NvY2tldChpcCwgcG9ydCkge1xyXG4gICAgcmV0dXJuIG5ldyBXZWJTb2NrZXQoXHJcbiAgICAgICAgYHdzOi8vJHtpcH06JHtwb3J0fWBcclxuICAgICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gc29ja2V0IHtXZWJTb2NrZXR9XHJcbiAqIEBwYXJhbSBkYXRhIHtzdHJpbmd9XHJcbiAqL1xyXG5mdW5jdGlvbiBzZW5kKHNvY2tldCwgZGF0YSkge1xyXG4gICAgaWYgKHNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuQ0xPU0VEKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3NvY2tldCBjbG9zZWQnKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIWRhdGEuZW5kc1dpdGgoJ1xcbicpKSB7XHJcbiAgICAgICAgZGF0YSArPSAnXFxuJztcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZygnc2VuZGluZyBjb21tYW5kOiAnICsgZGF0YSlcclxuXHJcbiAgICBzb2NrZXQuc2VuZChkYXRhKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0SW50ZXJwcmV0ZXJTb2NrZXQoaXApIHtcclxuICAgIGNvbnN0IHNlY29uZGFyeVNvY2tldCA9IGdldF9zb2NrZXQoaXAsIDMwMDAyKTtcclxuXHJcbiAgICBjb25zdCBvdXQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgc2Vjb25kYXJ5U29ja2V0Lm9ub3BlbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3NlY29uZGFyeSBzb2NrZXQgb3BlbmVkJyk7XHJcbiAgICAgICAgICAgIHNlbmQoc2Vjb25kYXJ5U29ja2V0LCAnaW50ZXJwcmV0ZXJfbW9kZSgpJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGludGVycHJldGVyU29ja2V0ID0gZ2V0X3NvY2tldChpcCwgMzAwMjApO1xyXG4gICAgICAgICAgICByZXNvbHZlKGludGVycHJldGVyU29ja2V0KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNlY29uZGFyeVNvY2tldC5vbmVycm9yID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHJlamVjdChldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG91dFxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiB0ZXN0Q29tbWFuZHMoKSB7XHJcbiAgICAvLyBjb25zdCBpbnRlcnByZXRlclNvY2tldCA9IGF3YWl0IGdldEludGVycHJldGVyU29ja2V0KFwibG9jYWxob3N0XCIpO1xyXG4gICAgLy9cclxuICAgIC8vIGludGVycHJldGVyU29ja2V0Lm9ubWVzc2FnZSA9IChldmVudCkgPT4ge1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGV2ZW50LmRhdGEpO1xyXG4gICAgLy8gfTtcclxuXHJcblxyXG4gICAgY29uc3QgY29tbWFuZHMgPSBbXHJcbiAgICAgICAgXCJtb3ZlaihbMC4wLCAxLjU3LCAwLjAsIC0xLjU3LCAwLjAsIDAuMF0sIGE9MS40LCB2PTEuMDUpXCIsXHJcbiAgICAgICAgXCJzZXRfZGlnaXRhbF9vdXQoMCwgVHJ1ZSlcIixcclxuICAgICAgICBcInNldF9kaWdpdGFsX291dCgxLCBGYWxzZSlcIixcclxuICAgICAgICBcInNldF9kaWdpdGFsX291dCgyLCBUcnVlKVwiLFxyXG4gICAgICAgIFwic2V0X2RpZ2l0YWxfb3V0KDMsIFRydWUpXCIsXHJcbiAgICAgICAgXCJwb3B1cChcXFwicG9zdFxcXCIsXFxcInBvc3RcXFwiKVwiXHJcbiAgICBdXHJcblxyXG4gICAgY29uc3QgcHJveHlTZXJ2ZXIgPSBnZXRfc29ja2V0KFwibG9jYWxob3N0XCIsIDg3NjUpO1xyXG4gICAgcHJveHlTZXJ2ZXIub25vcGVuID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdwcm94eSBzZXJ2ZXIgb3BlbmVkJyk7XHJcbiAgICAgICAgZm9yIChjb25zdCBjb21tYW5kIG9mIGNvbW1hbmRzKSB7XHJcbiAgICAgICAgICAgIHNlbmQocHJveHlTZXJ2ZXIsIGNvbW1hbmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjb21tYW5kRW50ZXJlZCcsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHNlbmQocHJveHlTZXJ2ZXIsIGUuZGV0YWlsLnRleHQpXHJcbiAgICAgICAgfSlcclxuICAgIH07XHJcblxyXG4gICAgLy8gaW50ZXJwcmV0ZXJTb2NrZXQub25vcGVuID0gKCkgPT4ge1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKCdpbnRlcnByZXRlciBzb2NrZXQgb3BlbmVkJyk7XHJcbiAgICAvLyAgICAgZm9yIChjb25zdCBjb21tYW5kIG9mIGNvbW1hbmRzKSB7XHJcbiAgICAvLyAgICAgICAgIHNlbmQoaW50ZXJwcmV0ZXJTb2NrZXQsIGNvbW1hbmQpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH07XHJcbn1cclxuXHJcblxyXG50ZXN0Q29tbWFuZHMoKS50aGVuKCk7XHJcblxyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJpbnB1dEZpZWxkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNvbW1hbmRBcmVhIiwiZ2V0VGV4dEZyb21JbnB1dCIsInRleHQiLCJ2YWx1ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwia2V5IiwiY3VzdG9tRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImRpc3BhdGNoRXZlbnQiLCJwVGFnIiwiY3JlYXRlRWxlbWVudCIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVQVGFnV2l0aFRleHQiLCJzZW5kIiwic29ja2V0IiwiZGF0YSIsInJlYWR5U3RhdGUiLCJXZWJTb2NrZXQiLCJDTE9TRUQiLCJlbmRzV2l0aCIsImNvbnNvbGUiLCJsb2ciLCJhc3luYyIsImNvbW1hbmRzIiwicHJveHlTZXJ2ZXIiLCJvbm9wZW4iLCJjb21tYW5kIiwidGVzdENvbW1hbmRzIiwidGhlbiJdLCJzb3VyY2VSb290IjoiIn0=